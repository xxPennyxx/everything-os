U0 main()
{

	I64 n, m, i, j, k;
	n=GetI64("Enter the no. of processes\n");
	m=GetI64("Enter the no. of resource types\n");
	I64 alloc[n][m];
	I64 max[n][m];
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{
			alloc[i][j]=GetI64("Enter alloc of resource type %d of process %d\n",j,i);

		}
	}
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{
			
		max[i][j]=GetI64("Enter max of resource type %d of process %d\n",j,i);		}
	}
	/*I64 alloc[5][3] = { { 0, 1, 0 }, // P0 // Allocation Matrix
						{ 2, 0, 0 }, // P1
						{ 3, 0, 2 }, // P2
						{ 2, 1, 1 }, // P3
						{ 0, 0, 2 } }; // P4

	I64 max[5][3] = { { 7, 5, 3 }, // P0 // MAX Matrix
					{ 3, 2, 2 }, // P1
					{ 9, 0, 2 }, // P2
					{ 2, 2, 2 }, // P3
					{ 4, 3, 3 } }; // P4*/
	I64 avail[m];
	for(i=0;i<m;i++)
	avail[i]=GetI64("Enter availability matrix\n");
	//int avail[3] = { 3, 3, 2 }; // Available Resources

	I64 finish[n], safeseq[n], ind = 0;
	for (k = 0; k < n; k++) {
		finish[k] = 0;
	}
	I64 need[n][m];
	for (i = 0; i < n; i++) {
		for (j = 0; j < m; j++)
			need[i][j] = max[i][j] - alloc[i][j];
	}
	I64 y = 0;
	for (k = 0; k < n; k++) {
		for (i = 0; i < n; i++) {
			if (finish[i] == 0) {

				I64 flag = 0;
				for (j = 0; j < m; j++) {
					if (need[i][j] > avail[j]){
						flag = 1;
						break;
					}
				}

				if (flag == 0) {
					safeseq[ind++] = i;
					for (y = 0; y < m; y++)
						avail[y] += alloc[i][y];
					finish[i] = 1;
				}
			}
		}
	}

	I64 flag = 1;
	
	for(I64 i=0;i<n;i++)
	{
	if(finish[i]==0)
	{
		flag=0;
		"The following system is not safe\n";
		break;
	}
	}
	
	if(flag==1)
	{
	"Following is the SAFE Sequence\n";
	for (i = 0; i < n - 1; i++)
		" P%d ->", safeseq[i];
	" P%d", safeseq[n - 1];
	}
	

}
main();